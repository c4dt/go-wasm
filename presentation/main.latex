\documentclass{beamer}

\usepackage[utf8]{inputenc}

\begin{document}

\title{Golang \& WebAssembly}
\author{Val√©rian Rousset @ C4DT}

\begin{frame}[plain]
	\titlepage
\end{frame}

\AtBeginSection[]
{
	\begin{frame}
		\frametitle{Table of Contents}
		\tableofcontents[currentsection]
	\end{frame}
}

\section{WebAssembly}

\begin{frame}
	\frametitle{Why}
	\begin{itemize}
		\item more and more work done in browser % crypto, games
		\item JavaScript (JS) is very slow % dynamically typed, parsed
		\item is already worked around so much % TypeScript, ScalaJS
		\item need an efficient way to compute
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{How}
	\begin{itemize}
		\item the "assembly for the web"
		\item can easily be translated to real assembly
		\item less parsing, safer types $\rightarrow$ running faster
		\item should be widely accepted in browsers
		\item can be a classic compiler target, usually via LLVM
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{When}
	\begin{itemize}
		\item main browser implementors working together since 2015
		\item draft released in 2017
		\item ~90\% of browsers supports it in 2020
	\end{itemize}
\end{frame}

\section{Hello, World!}

\begin{frame}
	\frametitle{What}
	\begin{itemize}
		\item classic simple example
		\item Go prints to the console
		\item JS to start built wasm
		\item HTML to link together
		\item Makefile to build everything
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{How}
	\begin{itemize}
		\item \texttt{main.go}: \texttt{main()} uses \texttt{fmt.Println} to do \texttt{console.log}
		\item \texttt{main.wasm}: built with \texttt{GOARCH=wasm GOOS=js go build}
		\item \texttt{main.js}: fetch \texttt{main.wasm}, compile and run it
		\item \texttt{wasm\_exec.js}: needed Go environment to run
		\item \texttt{index.html}: load \texttt{main.js} \& \texttt{wasm\_exec.js}
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{Do}
	\begin{itemize}
		\item \texttt{make serve} then check console
		\item change the displayed text, recompile, check
		\item when it panics; what happens?
	\end{itemize}
\end{frame}

\section{Incrementor}

\begin{frame}
	\frametitle{What}
	\begin{itemize}
		\item how to call a go function and get its result, from JS
		\item simple function which increment it's only argument
		\item may return error, may panic $\rightarrow$ helper code
		\item need a translation between JS \& Go types
		\item need to make function callable from JS
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{How}
	\begin{itemize}
		\item \texttt{js.Value} is JS $\rightarrow$ Go; \texttt{js.Wrapper} is Go $\rightarrow$ JS
		\item \texttt{js.Value} can be extracted with \texttt{.Int}, \texttt{.Bool}, ...
		\item function returns \texttt{interface\{\}}; IMO should be \texttt{js.Wrapper}

		\item \texttt{errorJS} to return wrapped, \texttt{instanceof} to actually throw
		\item \texttt{wrapPanic} to return errors instead of \texttt{undefined}
		\item create global \texttt{JS} object to expose functions
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{Do}
	\begin{itemize}
		\item \texttt{make serve} then check console
		\item modify JS or call \texttt{go\_wasm.increment} directly
		\item when given no argument; what happens?
		\item when given wrong type; what happens?
	\end{itemize}
\end{frame}

\section{Real project}

\begin{frame}
	\frametitle{What}
	\begin{itemize}
		\item adding TypeScript (TS) \& webpack for full starting project
		\item no new functionality from "incrementor" but more usable
		\item starting project that one would use after this presentation
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{How}
	\begin{itemize}
		\item TS needs type definitions $\rightarrow$ \texttt{./types}
		\item as global object, it's a \texttt{namespace} with flat functions in it
		\item with panic wrapping, it returns \texttt{... | Error}
		\item need to add \texttt{./types} in \texttt{tsconfig.json:typeRoot}

		\item webpack don't need wasm magic, it's only packing TS
	\end{itemize}
\end{frame}

\begin{frame}
	\frametitle{Do}
	\begin{itemize}
		\item \texttt{make serve} then check console
		\item modify TS, recompile, check
		\item when given no argument; what happens?
		\item when given wrong type; what happens?
	\end{itemize}
\end{frame}

\end{document}
