\documentclass{beamer}

\usepackage[utf8]{inputenc}

\begin{document}

\title{Golang \& WebAssembly}
\author{ValÃ©rian Rousset @ C4DT}

\begin{frame}[plain]
	\titlepage
\end{frame}

\AtBeginSection[]
{
	\begin{frame}
		\frametitle{Table of Contents}
		\tableofcontents[currentsection]
	\end{frame}
}

\section{WebAssembly}

\begin{frame}
	\frametitle{Why}
	% more and more browser
	% need computation speed
	% js is already worked around so much
\end{frame}

\begin{frame}
	\frametitle{How}
	% assembly for the web
	% can easily be translated to real asm
	% all browsers implementor working together
\end{frame}

\begin{frame}
	\frametitle{When}
	% first draft published in
	% implemented since XX in browsers
	% quite new but already working in most browser
\end{frame}

\section{Hello, World!}

\begin{frame}
	\frametitle{What}
	% the classic trivial example
	% go print to console
	% JS to start built wasm
	% html to link together
	% makefile to orchestrate
\end{frame}

\begin{frame}
	\frametitle{How}
	% main.go: main() fmt.Println
	% main.wasm: GOARCH=wasm GOOS=js go build
	% main.js: fetch 'main.wasm', compile then run
	% wasm_exec.js: needed go env to run (setup exit, some runtime)
	% index.html: load main.js & wasm_exec.js
\end{frame}

\begin{frame}
	\frametitle{Do}
	% `make serve` then check console
	% change the displayed text, recompile, check
	% change to panic, what happen -> not catched by promise.catch
\end{frame}

\section{Call function}

\begin{frame}
	\frametitle{What}
	% how to call function from JS, compute in go and get result in JS
	% simple function which increment it's only argument, may return error, may panic
	% need a translation between JS & go types
	% need to make provide callable from JS
\end{frame}

\begin{frame}
	\frametitle{How}
	% js.Value is JS -> Go, js.Wrapper is Go -> JS
	% js.Value are js value which can be extracted with .Int, .Bool, ...
	% increment returns interface{}, (but really, should be js.Wrapper)

	% errorJS to wrap, instanceof in js to actually throw
	% wrapPanic to return errors instead of undefined
	% create global JS object to expose functions
\end{frame}

\begin{frame}
	\frametitle{Do}
	% `make serve` then check console, modify JS or call `go_wasm.increment` directly
	% what happens when given no args
	% what happens when given wrong type
\end{frame}

\section{Real project}

\begin{frame}
	\frametitle{What}
	% adding typescript & webpack to be a full blown project
	% no new functionality in respect to "call function" but more usable one
	% the base one should use after this presentation
\end{frame}

\begin{frame}
	\frametitle{How}
	% typescript need type definition, defined in ./types
	% as global object, it's a "namespace" which flat functions in it
	% as no throw in wasm, pretty much everyone returns `... | Error`
	% need to add ./types in tsconfig.json:typeRoot

	% webpack don't need wasm magic, it's provided as hardcoded reference
\end{frame}

\begin{frame}
	\frametitle{Do}
	% `make serve` then check console, modify TS or call `go_wasm.increment` directly
	% what happens when given no args
	% what happens when given wrong type
\end{frame}

\end{document}
